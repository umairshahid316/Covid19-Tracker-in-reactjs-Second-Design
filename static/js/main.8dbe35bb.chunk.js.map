{"version":3,"sources":["Component/Cards/Cards.module.css","api/index.js","Component/Charts/Chart.jsx","Component/Cards/Cards.jsx","Component/CountryPicker/CountryPicker.jsx","App.js","serviceWorker.js","index.js","App.module.css","Component/Charts/Charts.module.css","Component/CountryPicker/CountryPicker.module.css","images/image.png","logo.svg"],"names":["module","exports","url","fetchData","country","a","changeableUrl","axios","get","data","confirmed","recovered","deaths","lastUpdate","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","value","options","legend","display","title","text","className","styles","container","Cards","Styles","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","duration","separator","Date","toDateString","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","src","coronaImage","image","alt","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8dbe35bb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__6M4SS\",\"card\":\"Cards_card__3Rn_s\",\"infected\":\"Cards_infected__3ORk0\",\"recovered\":\"Cards_recovered__1xK9f\",\"deaths\":\"Cards_deaths__15LkX\"};","import React from 'react';\r\nimport axios from 'axios';\r\n\r\nconst url=\"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async (country) => {\r\n  let changeableUrl=url;\r\n  if(country){\r\n    changeableUrl=`${url}/countries/${country}`\r\n  }  \r\n  \r\n  try{\r\n        const {data:{confirmed, recovered, deaths,lastUpdate}} =await axios.get(changeableUrl);\r\n                \r\n        return {confirmed, recovered, deaths, lastUpdate  }; \r\n    }\r\n    catch(error){\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const fetchDailyData = async () => {\r\n    try{\r\n        const {data} =await axios.get(`${url}/daily`);\r\n         \r\n        const modifiedData=data.map((dailyData)=>({\r\n            confirmed:dailyData.confirmed.total,\r\n            deaths:dailyData.deaths.total,\r\n            date:dailyData.reportDate,\r\n        }));\r\n        return modifiedData;\r\n    }\r\n    catch(error){\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const fetchCountries = async () => {\r\n    try{\r\n        const {data:{countries}} =await axios.get(`${url}/countries`);\r\n                \r\n        return countries.map((country)=>country.name) \r\n    }\r\n    catch(error){\r\n\r\n    }\r\n\r\n}\r\n","import React,{useState, useEffect} from 'react'\r\nimport {fetchDailyData} from '../../api/index';\r\nimport {Line, Bar} from 'react-chartjs-2';\r\nimport styles from './Charts.module.css';\r\n\r\nexport const Chart = ({data:{confirmed,recovered,deaths}, country}) => {\r\n  const [dailyData, setDailyData] = useState([])\r\n  \r\n  useEffect(() => {\r\nconst fetchAPI= async ()=>{\r\n setDailyData(await fetchDailyData());\r\n}\r\nfetchAPI();  \r\n\r\n  },[] )\r\n\r\n  const lineChart=(\r\n      dailyData.length\r\n      ?(\r\n<Line\r\ndata={{\r\n        labels:dailyData.map(({date})=> date),\r\n        datasets:[{\r\n        data:dailyData.map(({confirmed})=> confirmed),\r\n        label:'Infected',\r\n        borderColor:'#3333ff',\r\n        fill:true,\r\n    },{\r\n        data:dailyData.map(({deaths})=> deaths),\r\n        label:'Deaths',\r\n        backgroundColor:'rgba(255,0,0,0.5)',\r\n        borderColor:'red',\r\n        fill:true,\r\n    }],\r\n}}\r\n/>) :null\r\n  );\r\n\r\n  const barChart=(\r\n    confirmed\r\n    ? (\r\n        <Bar\r\n        data={{\r\n            labels:[\"Infected\",\"Recoverd\",\"Deaths\" ],\r\n            datasets:[{\r\n                label:\"people\",\r\n                backgroundColor:[\r\n                    \"rgba(0,0,255,0.5)\",\r\n                    \"rgba(0,255,0,0.5)\",\r\n                    \"rgba(255,0,0.5)\",\r\n                ],\r\n                data:[confirmed.value,recovered.value,deaths.value]\r\n            }]\r\n        }}\r\n        options={{\r\n            legend:{display:false},\r\n            title:{display:true,text:`current state in ${country}`},\r\n\r\n        }}\r\n        />\r\n        ):null\r\n)\r\n    return (\r\n        <div className={styles.container}>\r\n            {/* {lineChart}\r\n            {barChart} */}\r\n            {country ? barChart:lineChart}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Card, CardContent, Typography, Grid} from '@material-ui/core';\r\nimport Styles from './Cards.module.css';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nexport const Cards = ({data:{confirmed, recovered, deaths, lastUpdate}}) => {\r\n    if(!confirmed){\r\n       return \"Loading...\";\r\n   }\r\n\r\n    return (\r\n        <div className={Styles.container}>\r\n           <Grid container spacing={3} justify=\"center\">\r\n               <grid item component={Card} xs={12} md={3} className={cx(Styles.card, Styles.infected)}>\r\n                   <CardContent>\r\n                       <Typography color=\"textSecondary\" gutterBottom>\r\n                          Infected\r\n                       </Typography>\r\n                       \r\n                        <Typography variant=\"h5\">\r\n                            \r\n                       <CountUp start={0} end={confirmed.value} duration={2.5} separator=\",\"/>\r\n                        </Typography>\r\n\r\n                        <Typography color=\"textSecondary\">\r\n                        {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n\r\n                        <Typography variant=\"body2\">\r\n                            Number of active cases of COVID-19\r\n                        </Typography>\r\n                   </CardContent>\r\n\r\n               </grid>\r\n\r\n\r\n               <grid item component={Card} xs={12} md={3} className={cx(Styles.card, Styles.recovered)}>\r\n                   <CardContent>\r\n                       <Typography color=\"textSecondary\" gutterBottom>\r\n                          Recovered\r\n                       </Typography>\r\n                       \r\n                        <Typography variant=\"h5\">\r\n                            \r\n                            <CountUp start={0} end={recovered.value} duration={2.5} separator=\",\"/>\r\n                     \r\n                        </Typography>\r\n\r\n                        <Typography color=\"textSecondary\">\r\n                        {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n\r\n                        <Typography variant=\"body2\">\r\n                            Number of recoveries COVID-19\r\n                        </Typography>\r\n                   </CardContent>\r\n\r\n               </grid>\r\n\r\n\r\n               <grid item component={Card} xs={12} md={3} className={cx(Styles.card, Styles.deaths)}>\r\n                   <CardContent>\r\n                       <Typography color=\"textSecondary\" gutterBottom>\r\n                          Deaths\r\n                       </Typography>\r\n                       \r\n                        <Typography variant=\"h5\">\r\n                            \r\n                            <CountUp start={0} end={deaths.value} duration={2.5} separator=\",\"/>\r\n                     \r\n                        </Typography>\r\n\r\n                        <Typography color=\"textSecondary\">\r\n                            {new Date(lastUpdate).toDateString()}\r\n                     \r\n                        </Typography>\r\n\r\n                        <Typography variant=\"body2\">\r\n                            Number of deaths caused by COVID-19\r\n                        </Typography>\r\n                   </CardContent>\r\n\r\n               </grid>\r\n               \r\n               </Grid> \r\n        </div>\r\n    )\r\n}\r\n","import React,{useState, useEffect} from 'react'\r\nimport {NativeSelect,FormControl} from '@material-ui/core';\r\nimport styles from './CountryPicker.module.css';\r\n\r\nimport {fetchCountries} from '../../api';\r\n\r\nexport const CountryPicker = ({handleCountryChange}) => {\r\nconst [fetchedCountries, setFetchedCountries] = useState([])\r\n    useEffect(() => {\r\n        const fetchAPI= async ()=>{\r\n            setFetchedCountries(await fetchCountries() );\r\n        }\r\n        fetchAPI();\r\n    },[fetchedCountries])\r\n    return (\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect defaultValue=\"\" onChange={(e)=>handleCountryChange(e.target.value)}>\r\n        <option value=\"\">Global</option>\r\n    {fetchedCountries.map((country,i)=><option key={i} value={country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {Chart} from './Component/Charts/Chart';\nimport {Cards} from './Component/Cards/Cards';\nimport {CountryPicker} from './Component/CountryPicker/CountryPicker';\nimport Styles from './App.module.css';\nimport {fetchData} from './api';\nimport coronaImage from './images/image.png'\n\nclass App extends React.Component{\n\n\nstate={\n  data:{},\n  country:'',\n}\n  async componentDidMount(){\n    const fetchedData=await fetchData();\n  this.setState({data:fetchedData});  \n  }\n\n  handleCountryChange= async (country)=>{\n    const fetchedData=await fetchData(country);\n    this.setState({data:fetchedData, country: country});  \n  \n  }\n\n  render(){\nconst {data, country} =this.state;\n\nreturn(\n          <div className={Styles.container}>\n            <img src={coronaImage} className={Styles.image} alt=\"COVID-19\"/>\n          <Cards data={data}/>\n          <CountryPicker handleCountryChange={this.handleCountryChange}/>\n          <Chart data={data} country={country} />\n         \n           </div>\n\n    )\n  }\n}\n\nexport default App;\n\n\n\n\n// function App() {\n//   return (\n//     <div className={Styles.container}>\n//    <Cards/>\n//    <CountryPicker/>\n//    <Chart/>\n   \n//     </div>\n//   );\n// }\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__OBovy\",\"image\":\"App_image__3aa03\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Charts_container__My8SJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__B3YP8\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}